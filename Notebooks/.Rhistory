function(x) sum(x, na.rm= FALSE))
actitudes_matematicas_post$Afectivo_post =
apply(actitudes_matematicas_post[,c(7, 10, 16)], 1,
function(x) sum(x, na.rm= FALSE))
# Volvemos a obtener la matriz pre post
pre_post = inner_join(actitudes_matematicas_post,
dplyr::select(actitudes_matematicas_pre,
c("Código",
"Total_pre",
"Afectivo_pre",
"Cognitivo_pre",
"Conativo_pre")),
by = "Código")
pivot_to_bind = dplyr::select(pre_post, c("Código", "Total_pre",
"Afectivo_pre",
"Cognitivo_pre",
"Conativo_pre",
"Total_post",
"Afectivo_pre",
"Cognitivo_post",
"Conativo_post"))
pivot_to_bind[,2:ncol(pivot_to_bind)] =
apply(pivot_to_bind[,2:ncol(pivot_to_bind)],
2, function(x) min_max_scale(x))
pivot_to_bind =
pivot_to_bind %>%
pivot_longer(cols = !`Código`,
names_to = c("Prueba", "Tipo"),
names_sep = "_",
values_to = "score")
pivot_to_bind$Prueba = str_replace_all(pivot_to_bind$Prueba,
c("Total" = "Actitudes hacia las matematicas - Total",
"Afectivo" = "Actitudes hacia las matematicas - Afectivo",
"Cognitivo" = "Actitudes hacia las matematicas - Cognitivo",
"Conativo" = "Actitudes hacia las matematicas - Conativo"))
pivot_final = rbind(pivot_final, pivot_to_bind)
pre_post$Total_pre = min_max_scale(pre_post$Total_pre)
pre_post$Total_post = min_max_scale(pre_post$Total_post)
print("Estadístico de normalidad pre")
lillie.test(pre_post$Total_pre)
print("Estadístico de normalidad post")
lillie.test(pre_post$Total_post)
summ = data.frame(unclass(psych::describe(pre_post[,c("Total_pre",
"Total_post")])),
check.names = FALSE, stringsAsFactors = FALSE)
summ$vars = c("Total_pre", "Total_post")
summ[,1:10] %>%
gt()
comparacion =
wilcox.test(
x           = pre_post$Total_pre,
y           = pre_post$Total_post,
alternative = "two.sided",
mu          = 0,
var.equal   = TRUE,
paired      = TRUE,
conf.level  = 0.95
)
comparacion
pre_post %>%
dplyr::select(Total_pre, Total_post) %>%
pivot_longer(cols = c(Total_pre, Total_post),
values_to = "value",
names_to = "Aplicación") %>%
ggplot(aes(x = reorder(`Aplicación`, desc(`Aplicación`)), y = value)) +
geom_violin(trim=FALSE) +
theme_bw() +
theme(legend.position = "none") +
xlab("Aplicación") + ylab("")+
stat_summary(fun.data=mean_sdl, geom="pointrange", color="red") +
geom_jitter(shape=16, position=position_jitter(0.1), alpha=0.5) +
scale_x_discrete(labels = c("Pre","Post"))
# Guardamos la imagen
ggsave("../Plots/segunda_aplicacion/actitudes_matematicas.png")
size_effect =
cohen.d(pre_post$Total_post, pre_post$Total_pre, paired = TRUE)
size_effect
# Separamos los descriptivos importantes
desc = summ[,1:10] %>%
dplyr::select(c("n", "mean", "sd", "min", "max")) %>%
mutate(Prueba = "Actitudes hacia las matematicas - Total") %>%
mutate(Area = "Actitudes hacia las matematicas") %>%
mutate(`Aplicación` = c("Pre", "Post"))
descriptivos = rbind(descriptivos, desc)
# Guardamos los resultados de esta comparación
data_temp =
data.frame(Prueba = "Actitudes hacia las matematicas - Total",
`Media pre` = summ$mean[1],
`Media post` = summ$mean[2],
`p value` = comparacion$p.value,
`D de cohen` = size_effect$estimate)
comparaciones = rbind(comparaciones, data_temp)
pre_post$Afectivo_pre = min_max_scale(pre_post$Afectivo_pre)
pre_post$Afectivo_post = min_max_scale(pre_post$Afectivo_post)
print("Estadístico de normalidad pre")
lillie.test(pre_post$Afectivo_pre)
print("Estadístico de normalidad post")
lillie.test(pre_post$Afectivo_post)
summ = data.frame(unclass(psych::describe(pre_post[,c("Afectivo_pre",
"Afectivo_post")])),
check.names = FALSE, stringsAsFactors = FALSE)
summ$vars = c("Afectivo_pre", "Afectivo_post")
summ[,1:10] %>%
gt()
comparacion =
wilcox.test(
x           = pre_post$Afectivo_pre,
y           = pre_post$Afectivo_post,
alternative = "two.sided",
mu          = 0,
var.equal   = TRUE,
paired      = TRUE,
conf.level  = 0.95
)
comparacion
pre_post %>%
dplyr::select(Afectivo_pre, Afectivo_post) %>%
pivot_longer(cols = c(Afectivo_pre, Afectivo_post),
values_to = "value",
names_to = "Aplicación") %>%
ggplot(aes(x = reorder(`Aplicación`, desc(`Aplicación`)), y = value)) +
geom_violin(trim=FALSE) +
theme_bw() +
theme(legend.position = "none") +
xlab("Aplicación") + ylab("")+
stat_summary(fun.data=mean_sdl, geom="pointrange", color="red") +
geom_jitter(shape=16, position=position_jitter(0.1), alpha=0.5) +
scale_x_discrete(labels = c("Pre","Post"))
# Guardamos la imagen
ggsave("../Plots/segunda_aplicacion/actitudes_matematicas_afectivo.png")
size_effect =
cohen.d(pre_post$Afectivo_post, pre_post$Afectivo_pre, paired = TRUE)
size_effect
# Separamos los descriptivos importantes
desc = summ[,1:10] %>%
dplyr::select(c("n", "mean", "sd", "min", "max")) %>%
mutate(Prueba = "Actitudes hacia las matematicas - Afectivo") %>%
mutate(Area = "Actitudes hacia las matematicas") %>%
mutate(`Aplicación` = c("Pre", "Post"))
descriptivos = rbind(descriptivos, desc)
# Guardamos los resultados de esta comparación
data_temp =
data.frame(Prueba = "Actitudes hacia las matematicas - Afectivo",
`Media pre` = summ$mean[1],
`Media post` = summ$mean[2],
`p value` = comparacion$p.value,
`D de cohen` = size_effect$estimate)
comparaciones = rbind(comparaciones, data_temp)
pre_post$Cognitivo_pre = min_max_scale(pre_post$Cognitivo_pre)
pre_post$Cognitivo_post = min_max_scale(pre_post$Cognitivo_post)
print("Estadístico de normalidad pre")
lillie.test(pre_post$Cognitivo_pre)
print("Estadístico de normalidad post")
lillie.test(pre_post$Cognitivo_post)
summ = data.frame(unclass(psych::describe(pre_post[,c("Cognitivo_pre",
"Cognitivo_post")])),
check.names = FALSE, stringsAsFactors = FALSE)
summ$vars = c("Cognitivo_pre", "Cognitivo_post")
summ[,1:10] %>%
gt()
comparacion =
wilcox.test(
x           = pre_post$Cognitivo_pre,
y           = pre_post$Cognitivo_post,
alternative = "two.sided",
mu          = 0,
var.equal   = TRUE,
paired      = TRUE,
conf.level  = 0.95
)
comparacion
pre_post %>%
dplyr::select(Cognitivo_pre, Cognitivo_post) %>%
pivot_longer(cols = c(Cognitivo_pre, Cognitivo_post),
values_to = "value",
names_to = "Aplicación") %>%
ggplot(aes(x = reorder(`Aplicación`, desc(`Aplicación`)), y = value)) +
geom_violin(trim=FALSE) +
theme_bw() +
theme(legend.position = "none") +
xlab("Aplicación") + ylab("")+
stat_summary(fun.data=mean_sdl, geom="pointrange", color="red") +
geom_jitter(shape=16, position=position_jitter(0.1), alpha=0.5) +
scale_x_discrete(labels = c("Pre","Post"))
# Guardamos la imagen
ggsave("../Plots/segunda_aplicacion/actitudes_matematicas_cognitivo.png")
size_effect =
cohen.d(pre_post$Cognitivo_post, pre_post$Cognitivo_pre, paired = TRUE)
size_effect
# Separamos los descriptivos importantes
desc = summ[,1:10] %>%
dplyr::select(c("n", "mean", "sd", "min", "max")) %>%
mutate(Prueba = "Actitudes hacia las matematicas - Cognitivo") %>%
mutate(Area = "Actitudes hacia las matematicas") %>%
mutate(`Aplicación` = c("Pre", "Post"))
descriptivos = rbind(descriptivos, desc)
# Guardamos los resultados de esta comparación
data_temp =
data.frame(Prueba = "Actitudes hacia las matematicas - Cognitivo",
`Media pre` = summ$mean[1],
`Media post` = summ$mean[2],
`p value` = comparacion$p.value,
`D de cohen` = size_effect$estimate)
comparaciones = rbind(comparaciones, data_temp)
pre_post$Conativo_pre = min_max_scale(pre_post$Conativo_pre)
pre_post$Conativo_post = min_max_scale(pre_post$Conativo_post)
print("Estadístico de normalidad pre")
lillie.test(pre_post$Conativo_pre)
print("Estadístico de normalidad post")
lillie.test(pre_post$Conativo_post)
summ = data.frame(unclass(psych::describe(pre_post[,c("Conativo_pre",
"Conativo_post")])),
check.names = FALSE, stringsAsFactors = FALSE)
summ$vars = c("Conativo_pre", "Conativo_post")
summ[,1:10] %>%
gt()
comparacion =
wilcox.test(
x           = pre_post$Conativo_pre,
y           = pre_post$Conativo_post,
alternative = "two.sided",
mu          = 0,
var.equal   = TRUE,
paired      = TRUE,
conf.level  = 0.95
)
comparacion
pre_post %>%
dplyr::select(Conativo_pre, Conativo_post) %>%
pivot_longer(cols = c(Conativo_pre, Conativo_post),
values_to = "value",
names_to = "Aplicación") %>%
ggplot(aes(x = reorder(`Aplicación`, desc(`Aplicación`)), y = value)) +
geom_violin(trim=FALSE) +
theme_bw() +
theme(legend.position = "none") +
xlab("Aplicación") + ylab("")+
stat_summary(fun.data=mean_sdl, geom="pointrange", color="red") +
geom_jitter(shape=16, position=position_jitter(0.1), alpha=0.5) +
scale_x_discrete(labels = c("Pre","Post"))
# Guardamos la imagen
ggsave("../Plots/segunda_aplicacion/actitudes_matematicas_conativo.png")
size_effect =
cohen.d(pre_post$Conativo_post, pre_post$Conativo_pre, paired = TRUE)
size_effect
# Separamos los descriptivos importantes
desc = summ[,1:10] %>%
dplyr::select(c("n", "mean", "sd", "min", "max")) %>%
mutate(Prueba = "Actitudes hacia las matematicas - Conativo") %>%
mutate(Area = "Actitudes hacia las matematicas") %>%
mutate(`Aplicación` = c("Pre", "Post"))
descriptivos = rbind(descriptivos, desc)
# Guardamos los resultados de esta comparación
data_temp =
data.frame(Prueba = "Actitudes hacia las matematicas - Conativo",
`Media pre` = summ$mean[1],
`Media post` = summ$mean[2],
`p value` = comparacion$p.value,
`D de cohen` = size_effect$estimate)
comparaciones = rbind(comparaciones, data_temp)
# Motivación Pre
motivacion_pre = read_sheet(url_pre, sheet = "Motivación")
motivacion_pre = motivacion_pre[,1:16]
motivacion_pre = filter(motivacion_pre,
!is.na(`Código`),
!is.na(`1`))
motivacion_pre[,7:16] = apply(motivacion_pre[,7:16], 2,
function(x) str_to_upper(x))
claves_motivacion_pre = c('B','B','A','B','A','A','B','B','A','A')
motivacion_pre[,7:16] = calificacion(motivacion_pre[,7:16],
claves_motivacion_pre)
# Motivación Post
motivacion_post = read_sheet(url_post, sheet = "Motivación")
motivacion_post = motivacion_post[,1:16]
motivacion_post = filter(motivacion_post,
!is.na(`Código`),
!is.na(`1`))
motivacion_post[,7:16] = apply(motivacion_post[,7:16], 2,
function(x) str_to_upper(x))
claves_motivacion_post = c('B','A','A','B','B','B','B','B','A','A')
motivacion_post[,7:16] = calificacion(motivacion_post[,7:16],
claves_motivacion_post)
# Calificación
# General
motivacion_pre$Total_pre = apply(motivacion_pre[,7:16], 1,
function(x) sum(x, na.rm= FALSE))
motivacion_post$Total_post = apply(motivacion_post[,7:16], 1,
function(x) sum(x, na.rm= FALSE))
# Interés
motivacion_pre$Interes_pre = apply(motivacion_pre[,c(8,11,14)], 1,
function(x) sum(x, na.rm= FALSE))
motivacion_post$Interes_post = apply(motivacion_post[,c(7,10,13)], 1,
function(x) sum(x, na.rm= FALSE))
## Metas
# Orientación al aprendizaje
motivacion_pre$OrientacionAprendizaje_pre =
apply(motivacion_pre[,c(9,12,15)], 1,
function(x) sum(x, na.rm= FALSE))
motivacion_post$OrientacionAprendizaje_post =
apply(motivacion_post[,c(8,11,15)], 1,
function(x) sum(x, na.rm= FALSE))
# Orientación al resultado
motivacion_pre$OrientacionResultado_pre =
3 - motivacion_pre$OrientacionAprendizaje_pre
motivacion_post$OrientacionResultado_post =
3 - motivacion_post$OrientacionAprendizaje_post
# Atribución interna
motivacion_pre$AtribucionInterna_pre =
apply(motivacion_pre[,c(13,16)], 1,
function(x) sum(x, na.rm= FALSE))
motivacion_post$AtribucionInterna_post =
apply(motivacion_post[,c(9,16)], 1,
function(x) sum(x, na.rm= FALSE))
# Atribución externa
motivacion_pre$AtribucionExterna_pre =
2 - motivacion_pre$AtribucionInterna_pre
motivacion_post$AtribucionExterna_post =
2 - motivacion_post$AtribucionInterna_post
# Expectativa
motivacion_pre$Expectativa_pre = apply(motivacion_pre[,c(7, 10)], 1,
function(x) sum(x, na.rm= FALSE))
motivacion_post$Expectativa_post = apply(motivacion_post[,c(12, 14)], 1,
function(x) sum(x, na.rm= FALSE))
columnas_pre = c("Total_pre",
"Interes_pre",
"OrientacionResultado_pre",
"OrientacionAprendizaje_pre",
"AtribucionInterna_pre",
"AtribucionExterna_pre",
"Expectativa_pre")
columnas_post = c("Total_post",
"Interes_post",
"OrientacionAprendizaje_post",
"OrientacionResultado_post",
"AtribucionInterna_post",
"AtribucionExterna_post",
"Expectativa_post")
motivacion_pre[,columnas_pre] = apply(motivacion_pre[,columnas_pre],2,
function(x) min_max_scale(x) )
motivacion_post[,columnas_post] = apply(motivacion_post[,columnas_post],2,
function(x) min_max_scale(x) )
pre_post = inner_join(motivacion_post,
dplyr::select(motivacion_pre, c("Código",
columnas_pre)),
by = "Código")
pivot_to_bind = dplyr::select(pre_post, c("Código",
columnas_pre,
columnas_post))
pivot_to_bind[,2:ncol(pivot_to_bind)] =
apply(pivot_to_bind[,2:ncol(pivot_to_bind)],
2, function(x) 1 - min_max_scale(x))
pivot_to_bind =
pivot_to_bind %>%
pivot_longer(cols = !`Código`,
names_to = c("Prueba", "Tipo"),
names_sep = "_",
values_to = "score")
pivot_to_bind$Prueba = str_replace_all(pivot_to_bind$Prueba,
c("Total" = "Motivacion - Total",
"Interes" = "Motivacion - Interes",
"OrientacionAprendizaje" = "Motivacion - Metas",
"AtribucionInterna" = "Motivacion - Atribucion interna",
"Expectativa" = "Motivacion - Expectativas"))
pivot_final = rbind(pivot_final, pivot_to_bind)
knitr::opts_chunk$set(echo = FALSE)
alpha(motivacion_pre[,7:16])
for(i in seq(length(colnames(motivacion_pre[,7:16])))){
x = alpha(motivacion_pre[,7:16][,-i])
print(paste("El índice de confiabilidad cambia a", x,
"al eliminar el ítem",
colnames(motivacion_pre[,7:16])[i]))
}
alpha(motivacion_post[,7:16])
for(i in seq(length(colnames(motivacion_post[,7:16])))){
x = alpha(motivacion_post[,7:16][,-i])
print(paste("El índice de confiabilidad cambia a", x,
"al eliminar el ítem",
colnames(motivacion_post[,7:16])[i]))
}
alpha(motivacion_pre[,c(7:16)[-c(9)]])
for(i in seq(length(colnames(motivacion_pre[,c(7:16)[-c(9)]])))){
x = alpha(motivacion_pre[,c(7:16)[-c(9)]][,-i])
print(paste("El índice de confiabilidad cambia a", x,
"al eliminar el ítem",
colnames(motivacion_pre[,c(7:16)[-c(9)]])[i]))
}
alpha(motivacion_pre[,c(8,11,14)])
for(i in seq(length(colnames(motivacion_pre[,c(8,11,14)])))){
x = alpha(motivacion_pre[,c(8,11,14)][,-i])
print(paste("El índice de confiabilidad cambia a", x,
"al eliminar el ítem",
colnames(motivacion_pre[,c(8,11,14)])[i]))
}
alpha(motivacion_post[,c(7,10,13)])
for(i in seq(length(colnames(motivacion_post[,c(7,10,13)])))){
x = alpha(motivacion_post[,c(7,10,13)][,-i])
print(paste("El índice de confiabilidad cambia a", x,
"al eliminar el ítem",
colnames(motivacion_post[,c(7,10,13)])[i]))
}
alpha(motivacion_post[,c(7,10,13)])
for(i in seq(length(colnames(motivacion_post[,c(7,10,13)])))){
x = alpha(motivacion_post[,c(7,10,13)][,-i])
print(paste("El índice de confiabilidad cambia a", x,
"al eliminar el ítem",
colnames(motivacion_post[,c(7,10,13)])[i]))
}
alpha(motivacion_pre[,c(9,12,15)])
for(i in seq(length(colnames(motivacion_pre[,c(9,12,15)])))){
x = alpha(motivacion_pre[,c(9,12,15)][,-i])
print(paste("El índice de confiabilidad cambia a", x,
"al eliminar el ítem",
colnames(motivacion_pre[,c(9,12,15)])[i]))
}
alpha(motivacion_post[,c(8,11,15)])
for(i in seq(length(colnames(motivacion_post[,c(8,11,15)])))){
x = alpha(motivacion_post[,c(8,11,15)][,-i])
print(paste("El índice de confiabilidad cambia a", x,
"al eliminar el ítem",
colnames(motivacion_post[,c(8,11,15)])[i]))
}
alpha(motivacion_pre[,c(13,16)])
alpha(motivacion_post[,c(9,16)])
alpha(motivacion_pre[,c(7,10)])
alpha(motivacion_post[,c(12,14)])
analitem = item.exam(motivacion_pre[,7:16], discrim=T)
analitem = dplyr::select(analitem, -c("Item.Criterion", "Item.Validity"))
cols_num = colnames(analitem[,1:6])
analitem$Item = row.names(analitem)
analitem[,1:6] %>%
gt(rowname_col = "Item") %>%
fmt_number(
columns = cols_num,
decimals = 3
) %>%
tab_style(
style = list(
cell_text(align="center", weight="bold")
),
locations=cells_column_labels()
)%>%
tab_style(
style = list(
cell_text(align="center")
),
locations = cells_body())
# Guardamos los indicadores importantes
psicometricos_pre = analitem[,1:6] %>%
dplyr::select(c("Difficulty", "Discrimination")) %>%
mutate(Prueba = "Motivación - Pre") %>%
mutate(Item = row.names(.))
indicadores_psicometricos = rbind(indicadores_psicometricos,
psicometricos_pre)
analitem = item.exam(motivacion_post[,7:16], discrim=T)
analitem = dplyr::select(analitem, -c("Item.Criterion", "Item.Validity"))
cols_num = colnames(analitem[,1:6])
analitem$Item = row.names(analitem)
analitem[,1:6] %>%
gt(rowname_col = "Item") %>%
fmt_number(
columns = cols_num,
decimals = 3
) %>%
tab_style(
style = list(
cell_text(align="center", weight="bold")
),
locations=cells_column_labels()
)%>%
tab_style(
style = list(
cell_text(align="center")
),
locations = cells_body())
# Guardamos los indicadores importantes
psicometricos_pre = analitem[,1:6] %>%
dplyr::select(c("Difficulty", "Discrimination")) %>%
mutate(Prueba = "Motivación - Post") %>%
mutate(Item = row.names(.))
indicadores_psicometricos = rbind(indicadores_psicometricos,
psicometricos_pre)
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
rmarkdown::render(input="1.0-bapinedam-Primera_aplicacion.Rmd",
output_file = "../Pdf/Resultados primera aplicacion.pdf")
rm(list = ls(
))
rmarkdown::render(input="1.0-bapinedam-Primera_aplicacion.Rmd",
output_file = "../Pdf/Resultados primera aplicacion.pdf")
urkl_pre
url_pre
rmarkdown::render(input="1.0-bapinedam-Primera_aplicacion.Rmd",
output_file = "../Pdf/Resultados primera aplicacion.pdf")
#knitr::opts_chunk$set(echo = FALSE)
sesion_info = devtools::session_info()
dplyr::select(
tibble::as_tibble(sesion_info$packages),
c(package, loadedversion, source)
) %>%
gt()
rmarkdown::render(input="1.0-bapinedam-Primera_aplicacion.Rmd",
output_file = "../Pdf/Resultados primera aplicacion.pdf")
# Dar click en run o seleccionar
rmarkdown::render(input="1.0-bapinedam-Primera_aplicacion.Rmd",
output_file = "../Pdf/Resultados primera aplicacion.pdf")
rstudioapi::restartSession(command = "print('Welcome back!')")
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
