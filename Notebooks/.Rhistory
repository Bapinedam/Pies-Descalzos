names_to = c("Prueba", "Tipo"),
names_sep = "_",
values_to = "score")
pivot_to_bind$Prueba = str_replace_all(pivot_to_bind$Prueba,
c("Total" = "Socioemocionales - Regulación"))
pivot_final = rbind(pivot_final, pivot_to_bind)
print("Estadístico de normalidad pre")
lillie.test(pre_post$Total_pre)
print("Estadístico de normalidad post")
lillie.test(pre_post$Total_post)
summ = data.frame(unclass(psych::describe(pre_post[,c("Total_pre", "Total_post")])),
check.names = FALSE, stringsAsFactors = FALSE)
summ$vars = c("Total_pre", "Total_post")
summ[,1:10] %>%
gt()
comparacion =
wilcox.test(
x           = pre_post$Total_pre,
y           = pre_post$Total_post,
alternative = "two.sided",
mu          = 0,
var.equal   = TRUE,
paired      = TRUE,
conf.level  = 0.95
)
comparacion
pre_post %>%
dplyr::select(Total_pre, Total_post) %>%
pivot_longer(cols = c(Total_pre, Total_post),
values_to = "value",
names_to = "Aplicación") %>%
ggplot(aes(x = reorder(`Aplicación`, desc(`Aplicación`)), y = value)) +
geom_violin(trim=FALSE) +
theme_bw() +
theme(legend.position = "none") +
xlab("Aplicación") + ylab("")+
stat_summary(fun.data=mean_sdl, geom="pointrange", color="red") +
geom_jitter(shape=16, position=position_jitter(0.1), alpha=0.5) +
scale_x_discrete(labels = c("Pre","Post"))
size_effect =
cohen.d(pre_post$Total_post,
pre_post$Total_pre, paired = TRUE)
size_effect
# Separamos los descriptivos importantes
desc = summ[,1:10] %>%
dplyr::select(c("n", "mean", "sd", "min", "max")) %>%
mutate(Prueba = "Socioemocionales - Regulación") %>%
mutate(Area = "Habilidades socioemocionales") %>%
mutate(`Aplicación` = c("Pre", "Post"))
descriptivos = rbind(descriptivos, desc)
# Guardamos los resultados de esta comparación
data_temp =
data.frame(Prueba = "Socioemocionales - Regulación",
`Media pre` = summ$mean[1],
`Media post` = summ$mean[2],
`p value` = comparacion$p.value,
`D de cohen` = size_effect$estimate)
comparaciones = rbind(comparaciones, data_temp)
socio_reconocimiento_pre$Total_pre = apply(socio_reconocimiento_pre[,2:6], 1,
function(x) sum(x, na.rm= FALSE))
socio_reconocimiento_pre$Total_pre = apply(socio_reconocimiento_pre[,2:4], 1,
function(x) sum(x, na.rm= FALSE))
socio_reconocimiento_post$Total_post = apply(socio_reconocimiento_post[,2:4], 1,
function(x) sum(x, na.rm= FALSE))
socio_reconocimiento_pre$Total_pre =
min_max_scale(socio_reconocimiento_pre$Total_pre)
socio_reconocimiento_post$Total_post =
min_max_scale(socio_reconocimiento_post$Total_post)
pre_post = inner_join(socio_reconocimiento_post,
dplyr::select(socio_reconocimiento_pre, c("Código",
"Total_pre")),
by = "Código")
pivot_to_bind = dplyr::select(pre_post, c("Código",
Total_pre,
Total_post))
pivot_to_bind[,2:ncol(pivot_to_bind)] =
apply(pivot_to_bind[,2:ncol(pivot_to_bind)],
2, function(x) 1 - min_max_scale(x))
pivot_to_bind =
pivot_to_bind %>%
pivot_longer(cols = !`Código`,
names_to = c("Prueba", "Tipo"),
names_sep = "_",
values_to = "score")
pivot_to_bind$Prueba = str_replace_all(pivot_to_bind$Prueba,
c("Total" = "Socioemocionales - Reconocimiento"))
pivot_final = rbind(pivot_final, pivot_to_bind)
print("Estadístico de normalidad pre")
lillie.test(pre_post$Total_pre)
print("Estadístico de normalidad post")
lillie.test(pre_post$Total_post)
summ = data.frame(unclass(psych::describe(pre_post[,c("Total_pre",
"Total_post")])),
check.names = FALSE, stringsAsFactors = FALSE)
summ$vars = c("Total_pre", "Total_post")
summ[,1:10] %>%
gt()
comparacion =
wilcox.test(
x           = pre_post$Total_pre,
y           = pre_post$Total_post,
alternative = "two.sided",
mu          = 0,
var.equal   = TRUE,
paired      = TRUE,
conf.level  = 0.95
)
comparacion
pre_post %>%
dplyr::select(Total_pre, Total_post) %>%
pivot_longer(cols = c(Total_pre, Total_post),
values_to = "value",
names_to = "Aplicación") %>%
ggplot(aes(x = reorder(`Aplicación`, desc(`Aplicación`)), y = value)) +
geom_violin(trim=FALSE) +
theme_bw() +
theme(legend.position = "none") +
xlab("Aplicación") + ylab("")+
stat_summary(fun.data=mean_sdl, geom="pointrange", color="red") +
geom_jitter(shape=16, position=position_jitter(0.1), alpha=0.5) +
scale_x_discrete(labels = c("Pre","Post"))
size_effect =
cohen.d(pre_post$Total_post,
pre_post$Total_pre, paired = TRUE)
size_effect
# Separamos los descriptivos importantes
desc = summ[,1:10] %>%
dplyr::select(c("n", "mean", "sd", "min", "max")) %>%
mutate(Prueba = "Socioemocionales - Reconocimiento") %>%
mutate(Area = "Habilidades socioemocionales") %>%
mutate(`Aplicación` = c("Pre", "Post"))
descriptivos = rbind(descriptivos, desc)
# Guardamos los resultados de esta comparación
data_temp =
data.frame(Prueba = "Socioemocionales - Reconocimiento",
`Media pre` = summ$mean[1],
`Media post` = summ$mean[2],
`p value` = comparacion$p.value,
`D de cohen` = size_effect$estimate)
comparaciones = rbind(comparaciones, data_temp)
expresion_pre$Total_pre = apply(expresion_pre[,2:4], 1,
function (x) sum(x, na.rm = TRUE))
expresion_post$Total_post = apply(expresion_post[,2:4], 1,
function (x) sum(x, na.rm = TRUE))
expresion_pre$Total_pre = min_max_scale(expresion_pre$Total_pre)
expresion_post$Total_post = min_max_scale(expresion_post$Total_post)
pre_post = inner_join(expresion_post,
dplyr::select(expresion_pre, c("Código", "Total_pre")),
by = "Código")
pivot_to_bind = dplyr::select(pre_post, c("Código",
Total_pre,
Total_post))
pivot_to_bind[,2:ncol(pivot_to_bind)] =
apply(pivot_to_bind[,2:ncol(pivot_to_bind)],
2, function(x) 1 - min_max_scale(x))
pivot_to_bind =
pivot_to_bind %>%
pivot_longer(cols = !`Código`,
names_to = c("Prueba", "Tipo"),
names_sep = "_",
values_to = "score")
pivot_to_bind$Prueba = str_replace_all(pivot_to_bind$Prueba,
c("Total" = "Socioemocionales - Expresión"))
pivot_final = rbind(pivot_final, pivot_to_bind)
print("Estadístico de normalidad pre")
lillie.test(pre_post$Total_pre)
print("Estadístico de normalidad post")
lillie.test(pre_post$Total_post)
summ = data.frame(unclass(psych::describe(pre_post[,c("Total_pre", "Total_post")])),
check.names = FALSE, stringsAsFactors = FALSE)
summ$vars = c("Total_pre", "Total_post")
summ[,1:10] %>%
gt()
comparacion =
wilcox.test(
x           = pre_post$Total_pre,
y           = pre_post$Total_post,
alternative = "two.sided",
mu          = 0,
var.equal   = TRUE,
paired      = TRUE,
conf.level  = 0.95
)
comparacion
pre_post %>%
dplyr::select(Total_pre, Total_post) %>%
pivot_longer(cols = c(Total_pre, Total_post),
values_to = "value",
names_to = "Aplicación") %>%
ggplot(aes(x = reorder(`Aplicación`, desc(`Aplicación`)), y = value)) +
geom_violin(trim=FALSE) +
theme_bw() +
theme(legend.position = "none") +
xlab("Aplicación") + ylab("")+
stat_summary(fun.data=mean_sdl, geom="pointrange", color="red") +
geom_jitter(shape=16, position=position_jitter(0.1), alpha=0.5) +
scale_x_discrete(labels = c("Pre","Post"))
size_effect =
cohen.d(pre_post$Total_post,
pre_post$Total_pre, paired = TRUE)
size_effect
# Separamos los descriptivos importantes
desc = summ[,1:10] %>%
dplyr::select(c("n", "mean", "sd", "min", "max")) %>%
mutate(Prueba = "Socioemocionales - Expresión") %>%
mutate(Area = "Habilidades socioemocionales") %>%
mutate(`Aplicación` = c("Pre", "Post"))
descriptivos = rbind(descriptivos, desc)
# Guardamos los resultados de esta comparación
data_temp =
data.frame(Prueba = "Socioemocionales - Expresión",
`Media pre` = summ$mean[1],
`Media post` = summ$mean[2],
`p value` = comparacion$p.value,
`D de cohen` = size_effect$estimate)
comparaciones = rbind(comparaciones, data_temp)
library(scales)
alfa$Alfa = as.numeric(alfa$Alfa)
alfa$Prueba = chartr("áéíóú", "aeiou", alfa$Prueba)
drop_na(alfa) %>%
gt() %>%
fmt_number(
columns = "Alfa",
decimals = 2
) %>%
data_color(columns = "Alfa",
colors = col_numeric(palette = c("red","green"),
domain = c(0,1))) %>%
tab_style(
style = list(
cell_text(align="center", weight="bold")
),
locations=cells_column_labels()
)%>%
tab_style(
style = list(
cell_text(align="center")
),
locations = cells_body())
descriptivos$Prueba = chartr("áéíóú", "aeiou", descriptivos$Prueba)
colnames(descriptivos) = chartr("áéíóú", "aeiou", colnames(descriptivos))
dplyr::select(descriptivos, -Area) %>%
gt() %>%
fmt_number(
columns = c('mean','sd'),
decimals = 2
) %>%
tab_style(
style = list(
cell_text(align="center", weight="bold")
),
locations=cells_column_labels()
)%>%
tab_style(
style = list(
cell_text(align="center")
),
locations = cells_body())
indicadores_psicometricos$Prueba = chartr("áéíóú", "aeiou",
indicadores_psicometricos$Prueba)
indicadores_psicometricos$Item = chartr("áéíóú", "aeiou",
indicadores_psicometricos$Item)
indicadores_psicometricos %>%
gt() %>%
fmt_number(
columns = c("Difficulty", "Discrimination"),
decimals = 2
) %>%
data_color(columns = "Difficulty",
colors = col_numeric(palette = c("white","#5FA14A"),
domain = c(0,1))) %>%
data_color(columns = "Discrimination",
colors = col_numeric(palette = c("white","#5FA14A"),
domain = c(0,0.3),
na.color = "#5FA14A")) %>%
tab_style(
style = list(
cell_text(align="center", weight="bold")
),
locations=cells_column_labels()
)%>%
tab_style(
style = list(
cell_text(align="center")
),
locations = cells_body())
comparaciones$Prueba = chartr("áéíóú", "aeiou",
comparaciones$Prueba)
comparaciones %>%
gt() %>%
fmt_number(
columns = "p.value",
decimals = 2
) %>%
data_color(columns = "p.value",
colors = col_numeric(palette = c("#5FA14A","#5FA14A"),
domain = c(0,0.05),
na.color = "white")) %>%
tab_style(
style = list(
cell_text(align="center", weight="bold")
),
locations=cells_column_labels()
)%>%
tab_style(
style = list(
cell_text(align="center")
),
locations = cells_body())
filtro = filter(comparaciones, p.value < 0.05,
Media.pre < Media.post)$Prueba
significativos = descriptivos %>%
filter(Prueba %in% filtro)
significativos %>%
dplyr::select("mean" , "sd", "Prueba", "Aplicacion") %>%
ggplot(aes(x = Prueba, y = mean, color = Aplicacion)) +
geom_errorbar(aes(ymin= mean - sd, ymax = mean + sd), width = .2, position=position_dodge(0.6)) +
geom_point(position=position_dodge(0.6)) +
scale_color_manual(name = "Aplicación",
values=c(colores[2], colores[1]),
) + # Show dots
xlab("Prueba") +
ylab("Promedio") +
coord_flip() +
labs(fill = "Type") +
theme_bw()
significativos %>%
filter(Area == "Actitudes hacia el lenguaje") %>%
dplyr::select("mean" , "sd", "Prueba", "Aplicacion") %>%
ggplot(aes(x = Prueba, y = mean, color = Aplicacion)) +
geom_errorbar(aes(ymin= mean - sd, ymax = mean + sd), width = .2, position=position_dodge(0.6)) +
geom_point(position=position_dodge(0.6)) +
scale_color_manual(name = "Aplicación",
values=c(colores[2], colores[1]),
) + # Show dots
xlab("Prueba") +
ylab("Promedio") +
coord_flip() +
labs(fill = "Type") +
theme_bw()
significativos %>%
filter(Area == "Actitudes hacia las matematicas") %>%
dplyr::select("mean" , "sd", "Prueba", "Aplicacion") %>%
ggplot(aes(x = Prueba, y = mean, color = Aplicacion)) +
geom_errorbar(aes(ymin= mean - sd, ymax = mean + sd), width = .2, position=position_dodge(0.6)) +
geom_point(position=position_dodge(0.6)) +
scale_color_manual(name = "Aplicación",
values=c(colores[2], colores[1]),
) + # Show dots
xlab("Prueba") +
ylab("Promedio") +
coord_flip() +
labs(fill = "Type") +
theme_bw()
significativos %>%
filter(Area == "Motivación") %>%
dplyr::select("mean" , "sd", "Prueba", "Aplicacion") %>%
ggplot(aes(x = Prueba, y = mean, color = Aplicacion)) +
geom_errorbar(aes(ymin= mean - sd, ymax = mean + sd), width = .2, position=position_dodge(0.6)) +
geom_point(position=position_dodge(0.6)) +
scale_color_manual(name = "Aplicación",
values=c(colores[2], colores[1]),
) + # Show dots
xlab("Prueba") +
ylab("Promedio") +
coord_flip() +
labs(fill = "Type") +
theme_bw()
significativos %>%
filter(Area == "Funciones ejecutivas") %>%
dplyr::select("mean" , "sd", "Prueba", "Aplicacion") %>%
ggplot(aes(x = Prueba, y = mean, color = Aplicacion)) +
geom_errorbar(aes(ymin= mean - sd, ymax = mean + sd), width = .2, position=position_dodge(0.6)) +
geom_point(position=position_dodge(0.6)) +
scale_color_manual(name = "Aplicación",
values=c(colores[2], colores[1]),
) + # Show dots
xlab("Prueba") +
ylab("Promedio") +
coord_flip() +
labs(fill = "Type") +
theme_bw()
significativos %>%
filter(Area == "Habilidades socioemocionales") %>%
dplyr::select("mean" , "sd", "Prueba", "Aplicacion") %>%
ggplot(aes(x = Prueba, y = mean, color = Aplicacion)) +
geom_errorbar(aes(ymin= mean - sd, ymax = mean + sd), width = .2, position=position_dodge(0.6)) +
geom_point(position=position_dodge(0.6)) +
scale_color_manual(name = "Aplicación",
values=c(colores[2], colores[1]),
) + # Show dots
xlab("Prueba") +
ylab("Promedio") +
coord_flip() +
labs(fill = "Type") +
theme_bw()
base = c("Código" , "Ciudad")
data_ciudades = dplyr::select(actitudes_post, base)
data_ciudades = rbind(data_ciudades, dplyr::select(socioemocional_post, base))
data_ciudades = rbind(data_ciudades, dplyr::select(motivacion_post, base))
data_ciudades = rbind(data_ciudades, dplyr::select(inhibicion_post, base))
data_ciudades = rbind(data_ciudades, dplyr::select(mem_vis_post, base))
data_ciudades = rbind(data_ciudades, dplyr::select(mem_audi_post, base))
base = c("Código" , "Ciudad")
data_ciudades = dplyr::select(actitudes_post, base)
data_ciudades = rbind(data_ciudades, dplyr::select(socioemocional_post, base))
data_ciudades = rbind(data_ciudades, dplyr::select(motivacion_post, base))
data_ciudades = rbind(data_ciudades, dplyr::select(inhibicion_post, base))
data_ciudades = rbind(data_ciudades, dplyr::select(mem_vis_post, base))
data_ciudades = rbind(data_ciudades, dplyr::select(mem_audi_post, base))
pivot_ciudades = dplyr::left_join(pivot_final, data_ciudades, by = "Código")
pivot_ciudades_viz_2 = pivot_ciudades %>%
na.omit() %>%
group_by(Prueba, Ciudad, Tipo) %>%
summarise(Promedio = mean(score)) %>%
pivot_wider(names_from = Tipo, values_from = Promedio)
pivot_ciudades_viz_2 %>%
filter(Prueba %in% filtro) %>%
ggplot() +
geom_segment(aes(x=Prueba, xend=Prueba, y=pre, yend=post, color = Ciudad), size=1) +
geom_point( aes(x=Prueba, y=pre, color = Ciudad), size=3, shape = 16) +
geom_point( aes(x=Prueba, y=post, color = Ciudad),  size=3, shape = 17 ) +
coord_flip()+
theme_clean() +
scale_color_manual(values=colores[1:2]) +
xlab("") +
ylab("Puntuaciones en las pruebas")
base = c("Código" , "Ciclo")
data_ciclos = dplyr::select(actitudes_post, base)
data_ciclos = rbind(data_ciclos, dplyr::select(socioemocional_post, base))
data_ciclos = rbind(data_ciclos, dplyr::select(motivacion_post, base))
data_ciclos = rbind(data_ciclos, dplyr::select(inhibicion_post, base))
data_ciclos = rbind(data_ciclos, dplyr::select(mem_vis_post, base))
data_ciclos = rbind(data_ciclos, dplyr::select(mem_audi_post, base))
pivot_ciclos = dplyr::left_join(pivot_final, data_ciclos, by = "Código")
pivot_ciclos_viz_2 = pivot_ciclos %>%
na.omit() %>%
group_by(Prueba, Ciclo, Tipo) %>%
summarise(Promedio = mean(score)) %>%
pivot_wider(names_from = Tipo, values_from = Promedio)
pivot_ciclos_viz_2$Ciclo = as.character(pivot_ciclos_viz_2$Ciclo)
pivot_ciclos_viz_2 %>%
filter(Prueba %in% filtro) %>%
ggplot() +
geom_segment(aes(x=Prueba, xend=Prueba,
y=pre, yend=post, color = Ciclo), size=1) +
geom_point( aes(x=Prueba, y=pre, color = Ciclo), size=3, shape = 16) +
geom_point( aes(x=Prueba, y=post, color = Ciclo),  size=3, shape = 17 ) +
coord_flip()+
theme_clean() +
scale_color_manual(values=colores[1:2]) +
xlab("") +
ylab("Puntuaciones en las pruebas")
sesion_info = devtools::session_info()
dplyr::select(
tibble::as_tibble(sesion_info$packages),
c(package, loadedversion, source)
)
flexibilidad_pre = read_sheet(url_pre, sheet = "Flexibilidad")
col_items = paste(rep("Item", 20), rep(1:2, each = 10),
rep(paste("_", rep(1:10, 2))))
vector = c(colnames(flexibilidad_pre)[1:6], col_items)
flexibilidad_pre = flexibilidad_pre[,1:26]
flexibilidad_pre = filter(flexibilidad_pre,
!is.na(`Código`),
!is.na(`Item 1 _ 1`))
View(flexibilidad_pre)
flexibilidad_pre = read_sheet(url_pre, sheet = "Flexibilidad")
flexibilidad_pre = read_sheet(url_pre, sheet = "Flexibilidad")
col_items = paste(rep("Item", 20), rep(1:2, each = 10),
rep(paste("_", rep(1:10, 2))))
vector = c(colnames(flexibilidad_pre)[1:6], col_items)
colnames(flexibilidad_pre) = vector
flexibilidad_pre = flexibilidad_pre[,1:26]
flexibilidad_pre = filter(flexibilidad_pre,
!is.na(`Código`),
!is.na(`Item 1 _ 1`))
flexibilidad_pre = filter(flexibilidad_pre,
!is.na(`Código`),
!is.na(`Item 1 _ 1`),
`Item 1 _ 1` != 'NULL')
View(flexibilidad_pre)
flexibilidad_post = read_sheet(url_post, sheet = "Flexibilidad")
col_items = paste(rep("Item", 20), rep(1:2, each = 10),
rep(paste("_", rep(1:10, 2))))
vector = c(colnames(flexibilidad_post)[1:6], col_items)
colnames(flexibilidad_post) = vector
flexibilidad_post = flexibilidad_post[,1:26]
flexibilidad_post = filter(flexibilidad_post,
!is.na(`Código`),
!is.na(`Item 1 _ 1`),
`Item 1 _ 1` != 'NULL')
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
knitr::opts_chunk$set
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
rmarkdown::render(input="1.0-bapinedam-Primera_aplicacion.Rmd",
output_file = "../Pdf/Resultados primera aplicacion.pdf")
?item.exam
rmarkdown::render(input="1.0-bapinedam-Primera_aplicacion.Rmd",
output_file = "../Pdf/Resultados primera aplicacion.pdf")
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
rmarkdown::render(input="1.0-bapinedam-Primera_aplicacion.Rmd",
output_file = "../Pdf/Resultados primera aplicacion.pdf")
rmarkdown::render(input="2.0-bapinedam-Segunda_aplicacion.Rmd",
output_file = "../Pdf/Resultados segunda aplicacion.pdf")
